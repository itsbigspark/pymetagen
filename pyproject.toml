[tool.poetry]
name = "pymetagen"
version = "0.0.1"
description = "Metadata generator using polars as backend."
authors = ["Smart Data Foundy <info@smartdatafoundry.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pyarrow = "^14.0.1"
pandas = "^2.1.3"
regex = "^2023.6.3"
polars = "^0.19.19"
openpyxl = "^3.1.2"
click = "^8.1.7"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.3.3"
pytest = "^7.4.0"
coverage = "^7.3.0"
xlsxwriter = "^3.1.9"

[tool.poetry.scripts]
metagen = 'pymetagen.app:cli'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
preview = true
skip-string-normalization = false
include = '\.pyi?$'

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
profile = "black"
line_length = 79

[tool.ruff]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "UP", # pyupgrade
]
target-version = "py311"
line-length = 79
ignore = [
    "E501",
] # Ignore line length errors, since we're using Black/docformatter

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]

[tool.docformatter]
black = true
style = "sphinx"

[tool.coverage.html]
show_contexts = true

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc.)?abstractmethod",

    "if TYPE_CHECKING:",
]

[tool.coverage.run]
branch = true
include = ["./pymetagen/*"]

[tool.pytest.ini_options]
addopts = '--strict-markers --junitxml=test-reports/pytest.xml'
junit_family = 'xunit1'
