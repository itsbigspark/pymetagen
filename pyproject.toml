[tool.poetry]
name = "pymetagen"
version = "0.0.1"
description = "Metadata generator using polars as backend."
authors = ["Smart Data Foundy <info@smartdatafoundry.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pyarrow = "^13.0.0"
regex = "^2023.6.3"
tomlparams = "^0.1.4"
polars = "^0.18.15"
pandas = { version = "^2.1.0", optional = true }
openpyxl = "^3.1.2"
tabulate = "^0.9.0"

[tool.poetry.extras]
polars = ["polars"]
pandas = ["pandas"]

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.3.3"
tdda = "^2.0.9"
pytest = "^7.4.0"
parameterized = "^0.9.0"
pytest-env = "^1.0.1"
black = { extras = ["jupyter"], version = "^23.7.0" }
pytest-mock = "^3.11.1"
coverage = "^7.3.0"
pandas = "^2.1.0"


[tool.poetry.group.jupyter.dependencies]
ipykernel = "^6.25.1"

[tool.poetry.scripts]
metagen-version = 'pymetagen.__init__:main'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
preview = true
skip-string-normalization = false
include = '\.pyi?$'

# [tool.ruff]
# select = [
#     "E",  # pycodestyle
#     "F",  # pyflakes
#     "UP", # pyupgrade
# ]
# target-version = "py311"
# line-length = 79
# ignore = [
#     "E501",
# ] # Ignore line length errors, since we're using Black/docformatter

# [tool.ruff.per-file-ignores]
# "__init__.py" = ["E402"]


[tool.docformatter]
black = true
style = "sphinx"

# [tool.pytest.ini_options]
# addopts = '--strict-markers --junitxml=test-reports/pytest.xml'
# markers = [
#     "slow: marks tests as slow (deselect with '-m \"not slow\"')",
#     "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
# ]
# junit_family = 'xunit1' # used for CircleCI test paralellisation
# env = [
#     "D:GLEN_TEST_SIM_START_DATE=2021-01-01",
#     "D:GLEN_TEST_SIM_STOP_DATE=2021-02-01",
#     "D:GLEN_TEST_CONFIGS=p1k|p1k-fraud|sme-small", # keep this up to date with the areas we are currently working on
#     "D:GLEN_TEST_DETERMINISM_ITERATIONS=3",
# ]
# SIM_START and SIM_END are used to set the start and end dates when running
# simulations via testlib.run_sim(). Default short for local testing, and it set 
# to run longer simulations when running in CI.

# filterwarnings = ["ignore::pytest.PytestCollectionWarning"]
# igore collection warnings - we have some old classes written when we used unittest that now cause warnings in pytest but are fine
# TODO rename these classes or change the filename so pytest doesn't think they are tests

[tool.coverage.html]
show_contexts = true

# [tool.coverage.report]
# exclude_lines = [
#     # Have to re-enable the standard pragma
#     "pragma: no cover",

#     # Don't complain about missing debug-only code:
#     "def __repr__",

#     # Don't complain if tests don't hit defensive assertion code:
#     "raise AssertionError",
#     "raise NotImplementedError",

#     # Don't complain if non-runnable code isn't run:
#     "if 0:",
#     "if __name__ == .__main__.:",

#     # Don't complain about abstract methods, they aren't run:
#     "@(abc.)?abstractmethod",

#     "if TYPE_CHECKING:",
# ]

# [tool.coverage.run]
# branch = true
# include = ["./uncannyglen/*"]
