name: release
on:
  workflow_dispatch:

jobs:
  validate-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: check-tag
        run: |
            # get the version from pyproject.toml, check tag doesn't exist
            TAG=pymetagen-$(grep "^version = " pyproject.toml | sed -E 's/.*"(.*)"/\1/')
            echo "Checking tag $TAG doesn't exist"
            git fetch --tags
            if git rev-parse $TAG >/dev/null 2>&1; then
                echo "Tag $TAG already exists, fail"
                exit 1
            fi
            echo "Tag $TAG doesn't exist, pass"
    
      - name: check-changelog
        run: |
            # check that CHANGELOG.md has been updated by looking for the tag in the changelog
            TAG=pymetagen-$(grep "^version = " pyproject.toml | sed -E 's/.*"(.*)"/\1/')
            echo "Checking changelog has been updated for $TAG"
            if ! grep -q "^## $TAG" CHANGELOG.md; then
                echo "CHANGELOG.md not updated for $TAG, fail"
                exit 1
            fi
            echo "Changelog updated for $TAG, pass"

  github-release:
    runs-on: ubuntu-latest
    needs: validate-release
    steps:

      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
            python-version: '3.12'

      - name: Set release parameters
        id: set_release_options
        run: |
            TAG_NAME=pymetagen-$(grep "^version = " pyproject.toml | sed -E 's/.*"(.*)"/\1/')
            echo "TAG_NAME=$TAG_NAME"
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Get Release Text
        id: get_release_text
        run: |
            # write release text to a temporary file
            python .github/scripts/get_release_text.py > release_text.txt
            RELEASE_TEXT=$(cat release_text.txt)
            echo "Release text: $RELEASE_TEXT"
      - name: Release
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            TAG_NAME: ${{ steps.set_release_options.outputs.TAG_NAME }}
            BODY_PATH: release_text.txt
        run: |
            gh release create $TAG_NAME -F $BODY_PATH --target GITHUB_REF_NAME